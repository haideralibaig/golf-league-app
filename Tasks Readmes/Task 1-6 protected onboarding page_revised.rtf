{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Revised Onboarding Plan for Task 1.6 (Global Handicap System)\
\
  Updated API Route Plan (/api/onboarding/route.ts)\
\
  New Request Payload:\
  const onboardingSchema = z.object(\{\
    handicapIndex: z.number().min(0).max(54),\
    homeClub: z.string().min(2).max(100).trim(),\
    phoneNumber: z.string().optional(),\
    leagueId: z.string().min(1) // Required - specific league being onboarded into\
  \});\
\
  Revised Step-by-step Logic:\
\
  a. Authentication & Validation:\
  - Use await auth() to get current user's Clerk ID\
  - Validate all incoming data including the new leagueId field\
  - Return 401/400 for auth/validation failures\
\
  b. Database Record Verification:\
  - Find User record by Clerk ID\
  - Verify the league exists: prisma.league.findUnique(\{ where: \{ id: leagueId \} \})\
  - Verify user is actually a player in this league: prisma.player.findUnique(\{ where: \{ userId_leagueId \} \})\
  - Return 404 if league doesn't exist or user isn't a member\
\
  c. Updated Database Transaction:\
  await prisma.$transaction([\
    // Update User model with global handicap and phone\
    prisma.user.update(\{\
      where: \{ id: user.id \},\
      data: \{\
        phoneNumber: validatedData.phoneNumber,\
        globalHandicapIndex: validatedData.handicapIndex // NEW FIELD\
      \}\
    \}),\
\
    // Update specific Player record for this league\
    prisma.player.update(\{\
      where: \{\
        userId_leagueId: \{\
          userId: user.id,\
          leagueId: validatedData.leagueId\
        \}\
      \},\
      data: \{\
        handicapIndex: validatedData.handicapIndex, // Copy from global\
        homeClub: validatedData.homeClub, // NEW FIELD\
        status: "ONBOARDED" // NEW STATUS - onboarding complete\
      \}\
    \})\
  ]);\
\
  d. Success Response:\
  \{\
    "message": "Onboarding completed successfully",\
    "redirectUrl": "/leagues/[leagueId]/dashboard",\
    "globalHandicap": 12.5,\
    "leagueSpecificData": \{\
      "leagueId": "league_123",\
      "handicapIndex": 12.5,\
      "homeClub": "Pine Valley Golf Club"\
    \}\
  \}\
\
  Required Schema.prisma Changes\
\
  1. User Model Updates:\
  model User \{\
    id           String   @id @default(cuid())\
    clerkId      String   @unique\
    email        String   @unique\
    firstName    String?\
    lastName     String?\
    phoneNumber  String?\
    dateOfBirth  DateTime?\
    globalHandicapIndex Float  @default(54) // NEW FIELD - Global handicap\
    globalSettings Json   @default("\{\}")\
    createdAt    DateTime @default(now())\
    updatedAt    DateTime @updatedAt\
\
    // Relations\
    players Player[]\
\
    @@index([clerkId])\
    @@index([email])\
  \}\
\
  2. Player Model Updates:\
  model Player \{\
    id           String   @id @default(cuid())\
    userId       String\
    leagueId     String\
    role         Role     @default(PLAYER)\
    displayName  String\
    bio          String?\
    avatarUrl    String?\
    handicapIndex Float   @default(54) // League-specific handicap (initially = global)\
    homeClub     String?  // NEW FIELD - Player's home club\
    status       PlayerStatus @default(PENDING) // UPDATED - track onboarding status\
    joinedAt     DateTime @default(now())\
    updatedAt    DateTime @updatedAt\
\
    // Relations\
    user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)\
    league       League  @relation(fields: [leagueId], references: [id], onDelete: Cascade)\
    statistics   PlayerStatistics?\
\
    @@unique([userId, leagueId])\
    @@index([userId])\
    @@index([leagueId])\
    @@index([status])\
  \}\
\
  3. Updated PlayerStatus Enum:\
  enum PlayerStatus \{\
    PENDING     // Just joined, needs onboarding\
    ONBOARDED   // Completed onboarding for this league\
    ACTIVE      // Actively participating\
    INACTIVE    // Temporarily inactive\
    SUSPENDED   // Suspended from league\
  \}\
\
  Architectural Benefits of This Approach:\
\
  1. Global Handicap System:\
  - User has one master handicap stored in User.globalHandicapIndex\
  - Each league gets a copy in Player.handicapIndex (can diverge based on league rules)\
  - Easy to sync global changes across all leagues\
\
  2. League-Specific Onboarding:\
  - Users must complete onboarding for each league they join\
  - Each league can have different home club associations\
  - Status tracking per league membership\
\
  3. Future Course Database Integration:\
  - homeClub field ready to reference future Course model\
  - Can be validated against master course database\
  - Supports players having different home clubs in different leagues\
\
  4. Status Management:\
  - Clear progression: PENDING \uc0\u8594  ONBOARDED \u8594  ACTIVE\
  - Enables league-specific access controls\
  - Supports different onboarding flows per league\
\
  This design provides the foundation for a sophisticated multi-league golf management system with global handicap tracking and league-specific customizations.}