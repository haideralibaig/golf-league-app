{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww22800\viewh15380\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Plan: Ably Real-time SDK Integration for The Bogey Club\
\
  Overview\
\
  Integrate Ably Real-time SDK to enable live features for money games, with secure token-based authentication and a clean React hook-based API for channel\
  subscriptions.\
\
  1. Dependencies Installation\
\
  Required Packages\
\
  pnpm add ably\
  pnpm add -D @types/ably  # If needed for TypeScript\
\
  Environment Variables\
\
  Add to .env.local:\
  ABLY_API_KEY=your_ably_api_key_here\
  NEXT_PUBLIC_ABLY_CLIENT_ID=your_ably_app_id\
\
  2. File Structure\
\
  src/\
  \uc0\u9500 \u9472 \u9472  components/\
  \uc0\u9474    \u9492 \u9472 \u9472  providers/\
  \uc0\u9474        \u9492 \u9472 \u9472  ably-provider.tsx          # Main Ably provider component\
  \uc0\u9500 \u9472 \u9472  hooks/\
  \uc0\u9474    \u9492 \u9472 \u9472  use-ably-channel.ts           # Custom hook for channel subscriptions\
  \uc0\u9500 \u9472 \u9472  lib/\
  \uc0\u9474    \u9492 \u9472 \u9472  ably.ts                       # Ably client configuration and utilities\
  \uc0\u9492 \u9472 \u9472  app/\
      \uc0\u9492 \u9472 \u9472  api/\
          \uc0\u9492 \u9472 \u9472  ably-auth/\
              \uc0\u9492 \u9472 \u9472  route.ts              # Token authentication endpoint\
\
  3. Core Components Design\
\
  3.1 Ably Provider Component (src/components/providers/ably-provider.tsx)\
\
  Purpose: Manage global Ably client instance and provide context to child components.\
\
  Key Features:\
  - Initialize Ably client with token authentication\
  - Manage connection state (connecting, connected, disconnected, error)\
  - Provide AblyContext for child components\
  - Handle token refresh automatically\
  - Connection retry logic with exponential backoff\
\
  Props Interface:\
  interface AblyProviderProps \{\
    children: React.ReactNode;\
  \}\
\
  interface AblyContextValue \{\
    client: Ably.Realtime | null;\
    connectionState: Ably.ConnectionState;\
    isConnected: boolean;\
    error: Ably.ErrorInfo | null;\
  \}\
\
  3.2 Authentication Route (src/app/api/ably-auth/route.ts)\
\
  Purpose: Securely generate Ably token requests for authenticated users.\
\
  Security Features:\
  - Verify Clerk authentication before issuing tokens\
  - Include user ID in token claims for channel-level permissions\
  - Set appropriate token TTL (Time To Live)\
  - Add capability restrictions based on user role\
\
  Token Claims Strategy:\
  \{\
    clientId: `user_$\{clerkUserId\}`,\
    capability: \{\
      "league-*": ["publish", "subscribe", "presence"],\
      "game-*": ["publish", "subscribe", "presence"],\
      "private-user-$\{clerkUserId\}": ["*"]\
    \},\
    ttl: 3600000 // 1 hour\
  \}\
\
  3.3 Custom React Hook (src/hooks/use-ably-channel.ts)\
\
  Purpose: Provide easy channel subscription management for React components.\
\
  Hook Interface:\
  interface UseAblyChannelOptions \{\
    channelName: string;\
    onMessage?: (message: Ably.Message) => void;\
    onPresence?: (message: Ably.PresenceMessage) => void;\
    subscribe?: boolean; // Allow conditional subscription\
  \}\
\
  interface UseAblyChannelReturn \{\
    channel: Ably.RealtimeChannel | null;\
    publish: (name: string, data: any) => Promise<void>;\
    presence: \{\
      enter: (data?: any) => Promise<void>;\
      leave: (data?: any) => Promise<void>;\
      get: () => Promise<Ably.PresenceMessage[]>;\
    \};\
    connectionState: Ably.ConnectionState;\
    isLoading: boolean;\
    error: Ably.ErrorInfo | null;\
  \}\
\
  Hook Features:\
  - Automatic subscription/unsubscription lifecycle\
  - Message publishing capabilities\
  - Presence management (enter/leave/get)\
  - Connection state monitoring\
  - Error handling and retry logic\
  - Memoized channel instances\
\
  4. Channel Naming Strategy\
\
  Convention for Golf League Channels:\
\
  // League-wide channels\
  `league-$\{leagueId\}`\
\
  // Money game specific channels\
  `game-$\{gameId\}`\
\
  // Chapter-specific channels\
  `chapter-$\{chapterId\}`\
\
  // Private user channels\
  `private-user-$\{userId\}`\
\
  // Tournament channels\
  `tournament-$\{tournamentId\}`\
\
  Channel Permissions Matrix:\
\
  - League Channels: All league members can subscribe, admins can publish\
  - Game Channels: Game participants can publish/subscribe\
  - Private Channels: Only the specific user can access\
  - Tournament Channels: Participants can subscribe, directors can publish\
\
  5. Integration Points\
\
  5.1 Layout Integration\
\
  Wrap the authenticated layout with AblyProvider:\
  // In src/app/(app)/layout.tsx\
  <AblyProvider>\
    <ClerkProvider>\
      \{/* Existing layout content */\}\
    </ClerkProvider>\
  </AblyProvider>\
\
  5.2 Component Usage Pattern\
\
  // In any component needing real-time features\
  const \{ publish, connectionState \} = useAblyChannel(\{\
    channelName: `game-$\{gameId\}`,\
    onMessage: (message) => \{\
      // Handle incoming game updates\
    \}\
  \});\
\
  6. Error Handling & Resilience\
\
  Connection Management:\
\
  - Automatic reconnection with exponential backoff\
  - Connection state indicators in UI\
  - Graceful degradation when offline\
  - Token refresh handling\
\
  Message Reliability:\
\
  - Message queuing during disconnection\
  - Duplicate message detection\
  - Ordered message delivery for critical updates\
\
  7. Security Considerations\
\
  Token Security:\
\
  - Short-lived tokens (1 hour TTL)\
  - User-specific clientId for accountability\
  - Capability restrictions per channel type\
  - Server-side token generation only\
\
  Channel Access Control:\
\
  - League membership verification before token issuance\
  - Role-based channel permissions\
  - Private channels for sensitive data\
\
  8. Development Phases\
\
  Phase 3.1 (Current):\
\
  - Basic Ably client setup and authentication\
  - Provider component and context\
  - Basic channel subscription hook\
\
  Phase 3.2:\
\
  - Money game specific channel logic\
  - Presence management for game participants\
  - Message queuing and reliability features\
\
  Phase 3.3:\
\
  - Advanced features (history, push notifications)\
  - Performance optimizations\
  - Monitoring and analytics\
\
  9. Testing Strategy\
\
  Integration Testing:\
\
  - Connection establishment and token refresh\
  - Channel subscription/unsubscription lifecycle\
  - Message publishing and receiving\
  - Presence enter/leave/get operations\
\
  Error Scenarios:\
\
  - Network disconnection/reconnection\
  - Invalid token handling\
  - Channel permission errors\
  - Message delivery failures\
\
  This plan provides a robust foundation for real-time features while maintaining security and following React best practices. The modular design allows for easy\
  testing and future enhancements.}