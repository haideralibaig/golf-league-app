// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// CORE MULTI-TENANT MODELS
// ==========================================

model League {
  id          String   @id @default(cuid())
  name        String
  description String?
  joinCode    String   @unique @default(cuid())
  settings    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  chapters Chapter[]
  courses  Course[]

  @@index([joinCode])
}

model Chapter {
  id          String   @id @default(cuid())
  leagueId    String
  name        String
  description String?
  location    String?
  settings    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  league  League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  players Player[]

  @@index([leagueId])
}

model User {
  id                  String    @id @default(cuid())
  clerkId             String    @unique
  email               String    @unique
  firstName           String?
  lastName            String?
  phoneNumber         String?
  dateOfBirth         DateTime?
  globalHandicapIndex Float?    // Global handicap for the user
  globalSettings      Json      @default("{}")
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  players Player[]

  @@index([clerkId])
  @@index([email])
}

model Player {
  id            String       @id @default(cuid())
  userId        String
  chapterId     String
  role          Role         @default(PLAYER)
  displayName   String
  bio           String?
  avatarUrl     String?
  handicapIndex Float?       // League-specific handicap, can be null initially
  homeClub      String?      // Player's home club for this specific league
  status        PlayerStatus @default(PENDING) // Default status for new players
  joinedAt      DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter    Chapter           @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  statistics PlayerStatistics?

  @@unique([userId, chapterId])
  @@index([userId])
  @@index([chapterId])
  @@index([status])
}

model PlayerStatistics {
  id                   String   @id @default(cuid())
  playerId             String   @unique
  scoringAverage       Float    @default(0)
  lowestScore          Int?
  highestScore         Int?
  roundsPlayed         Int      @default(0)
  fairwaysInRegulation Float    @default(0)
  greensInRegulation   Float    @default(0)
  puttsPerRound        Float    @default(0)
  moneyGamesWon        Int      @default(0)
  moneyGamesLost       Int      @default(0)
  totalMoneyWon        Float    @default(0)
  totalMoneyLost       Float    @default(0)
  tournamentsPlayed    Int      @default(0)
  tournamentsWon       Int      @default(0)
  topTenFinishes       Int      @default(0)
  handicapHistory      Json     @default("[]")
  lastHandicapUpdate   DateTime @default(now())
  lastCalculatedAt     DateTime @default(now())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@index([playerId])
}

model Course {
  id                  String   @id @default(cuid())
  leagueId            String
  name                String
  location            String?
  isOfficial          Boolean  @default(false)
  localRules          String?
  latitude            Float?
  longitude           Float?
  holeCount           Int      @default(18)
  architect           String?
  yearBuilt           Int?
  courseRecord        Int?
  courseRecordHolder  String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  league  League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  holes   Hole[]
  teeSets TeeSet[]

  @@index([leagueId])
}

model Hole {
  id          String @id @default(cuid())
  courseId    String
  holeNumber  Int
  par         Int
  strokeIndex Int

  course   Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teeInfos TeeSetHoleInfo[]

  @@unique([courseId, holeNumber])
}

model TeeSet {
  id            String   @id @default(cuid())
  courseId      String
  name          String
  color         String
  courseRating  Float
  slopeRating   Int

  course    Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  holeInfos TeeSetHoleInfo[]
}

model TeeSetHoleInfo {
  id        String @id @default(cuid())
  teeSetId  String
  holeId    String
  yardage   Int

  teeSet TeeSet @relation(fields: [teeSetId], references: [id], onDelete: Cascade)
  hole   Hole   @relation(fields: [holeId], references: [id], onDelete: Cascade)

  @@unique([teeSetId, holeId])
}


// ==========================================
// ENUMS
// ==========================================

enum Role {
  PLAYER
  TOURNAMENT_DIRECTOR
  CHAPTER_ADMIN
  LEAGUE_ADMIN
  SYSTEM_ADMIN
}

enum PlayerStatus {
  PENDING   // Just joined, needs onboarding
  ONBOARDED // Completed onboarding for this league
  ACTIVE    // Fully active member
  INACTIVE
  SUSPENDED
}