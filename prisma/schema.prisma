// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// CORE MULTI-TENANT MODELS
// ==========================================

model League {
  id              String   @id @default(cuid())
  name            String
  description     String?
  joinCode        String   @unique @default(cuid())
  settings        Json     @default("{}")
  defaultCurrency Currency @default(USD)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  chapters Chapter[]
  courses  Course[]

  @@index([joinCode])
}

model Chapter {
  id          String   @id @default(cuid())
  leagueId    String
  name        String
  description String?
  location    String?
  settings    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  league     League      @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  players    Player[]
  moneyGames MoneyGame[]

  @@index([leagueId])
}

model User {
  id                  String    @id @default(cuid())
  clerkId             String    @unique
  email               String    @unique
  firstName           String?
  lastName            String?
  phoneNumber         String?
  dateOfBirth         DateTime?
  globalHandicapIndex Float?    // Global handicap for the user
  globalSettings      Json      @default("{}")
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  players Player[]

  @@index([clerkId])
  @@index([email])
}

model Player {
  id            String       @id @default(cuid())
  userId        String
  chapterId     String
  role          Role         @default(PLAYER)
  displayName   String
  bio           String?
  avatarUrl     String?
  handicapIndex Float?       // League-specific handicap, can be null initially
  homeClub      String?      // Player's home club for this specific league
  status        PlayerStatus @default(PENDING) // Default status for new players
  joinedAt      DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter           Chapter            @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  statistics        PlayerStatistics?
  createdMoneyGames MoneyGame[]        @relation("CreatedMoneyGames")
  moneyGamePlayers  MoneyGamePlayer[]

  @@unique([userId, chapterId])
  @@index([userId])
  @@index([chapterId])
  @@index([status])
}

model PlayerStatistics {
  id                   String   @id @default(cuid())
  playerId             String   @unique
  scoringAverage       Float    @default(0)
  lowestScore          Int?
  highestScore         Int?
  roundsPlayed         Int      @default(0)
  fairwaysInRegulation Float    @default(0)
  greensInRegulation   Float    @default(0)
  puttsPerRound        Float    @default(0)
  moneyGamesWon        Int      @default(0)
  moneyGamesLost       Int      @default(0)
  totalMoneyWon        Float    @default(0)
  totalMoneyLost       Float    @default(0)
  tournamentsPlayed    Int      @default(0)
  tournamentsWon       Int      @default(0)
  topTenFinishes       Int      @default(0)
  handicapHistory      Json     @default("[]")
  lastHandicapUpdate   DateTime @default(now())
  lastCalculatedAt     DateTime @default(now())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@index([playerId])
}

model Course {
  id                  String   @id @default(cuid())
  leagueId            String
  name                String
  location            String?
  isOfficial          Boolean  @default(false)
  localRules          String?
  latitude            Float?
  longitude           Float?
  holeCount           Int      @default(18)
  architect           String?
  yearBuilt           Int?
  courseRecord        Int?
  courseRecordHolder  String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  league     League      @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  holes      Hole[]
  teeSets    TeeSet[]
  moneyGames MoneyGame[]

  @@index([leagueId])
}

model Hole {
  id          String @id @default(cuid())
  courseId    String
  holeNumber  Int
  par         Int
  strokeIndex Int

  course   Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teeInfos TeeSetHoleInfo[]

  @@unique([courseId, holeNumber])
}

model TeeSet {
  id            String   @id @default(cuid())
  courseId      String
  name          String
  color         String
  courseRating  Float
  slopeRating   Int

  course    Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  holeInfos TeeSetHoleInfo[]
}

model TeeSetHoleInfo {
  id        String @id @default(cuid())
  teeSetId  String
  holeId    String
  yardage   Int

  teeSet TeeSet @relation(fields: [teeSetId], references: [id], onDelete: Cascade)
  hole   Hole   @relation(fields: [holeId], references: [id], onDelete: Cascade)

  @@unique([teeSetId, holeId])
}

model MoneyGame {
  id            String          @id @default(cuid())
  gameType      GameType
  status        MoneyGameStatus @default(WAITING_FOR_PLAYERS)
  courseId      String
  chapterId     String          // Which chapter this game belongs to
  currency      Currency        @default(USD)
  scheduledDate DateTime?       // Optional - null for "Play Now" games
  description   String?
  createdBy     String          // Player ID who created the game
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  startedAt     DateTime?       // When game actually started
  completedAt   DateTime?       // When game finished

  // Relations
  course    Course            @relation(fields: [courseId], references: [id])
  chapter   Chapter           @relation(fields: [chapterId], references: [id])
  creator   Player            @relation("CreatedMoneyGames", fields: [createdBy], references: [id])
  players   MoneyGamePlayer[]

  @@index([chapterId, status])
  @@index([createdBy])
  @@index([scheduledDate])
}

model MoneyGamePlayer {
  id        String                  @id @default(cuid())
  gameId    String
  playerId  String?                 // Null for guest players
  guestName String?                 // Name for guest players
  status    PlayerInvitationStatus  @default(INVITED)
  joinedAt  DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  // Relations
  game   MoneyGame @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player Player?   @relation(fields: [playerId], references: [id])

  // Constraints
  @@unique([gameId, playerId])  // Prevent duplicate registered players
  @@index([gameId])
  @@index([playerId])
}


// ==========================================
// ENUMS
// ==========================================

enum Role {
  PLAYER
  TOURNAMENT_DIRECTOR
  CHAPTER_ADMIN
  LEAGUE_ADMIN
  SYSTEM_ADMIN
}

enum PlayerStatus {
  PENDING   // Just joined, needs onboarding
  ONBOARDED // Completed onboarding for this league
  ACTIVE    // Fully active member
  INACTIVE
  SUSPENDED
}

enum GameType {
  TWO_VS_TWO_AUTO_PRESS
  INDIVIDUAL_STROKE_PLAY
  TEAM_SCRAMBLE
  SKINS_GAME
}

enum MoneyGameStatus {
  WAITING_FOR_PLAYERS    // Lobby phase, players accepting/declining
  READY_TO_START         // All players accepted, can start
  IN_PROGRESS           // Game is active
  COMPLETED             // Game finished
  CANCELLED             // Game was cancelled
}

enum PlayerInvitationStatus {
  INVITED               // Initial state for invited players
  ACCEPTED              // Player accepted invitation
  DECLINED              // Player declined invitation
}

enum Currency {
  USD
  EUR
  GBP
  CAD
  AUD
  JPY
}